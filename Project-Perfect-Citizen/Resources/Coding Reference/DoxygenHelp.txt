Use Doxygen by starting a line with 3 /'s (ignoring whitespace):
		/// Comment Here

If multiple adjacent lines contain Doxygen comments, the comments will
be read across multiple lines. Doxygen will also associate comments
with the adjacent class or function automatically. I find that filling
a line with /'s makes it easier to mentally seperate these comments
from code, but this isn't necessary.

You can use any number of tags to get Doxygen to organize your 
comments. Tags start with @, and some common example are below.

@brief		- Should be a *short* summary.
@details	- Full summary. Remember that documentation is tailored to
				the user, not the implementation details.
@pre		- Precondition the user should satisfy
@post		- Postcondition the user should be aware of
@todo		- Doxygen will keep track of these on the html produced.
				VS will also track todo items if you format them 
				differently. Specifically, if they have the letters 
				todo first in the comment, i.e. //todo, // TODO:
				To see them in VS, go to View->Other Windows->Task List
				It might be nice to decide which we use for what.
@return		- Summary of the return value

Some commands have parameters before the comments, denoted here in 
[]'s:

@param	[paramName]	- Summary about the purpose of a given parameter
@param [in/out] [paramName] - Same as above, except Doxygen has an
				extra parameter that can be 'in' or 'out', describing
				the direction of the parameter data flow.


Note that Doxygen will not document private members or functions unless


Example:
	///////////////////////////////////////////////////////////////////
	/// @brief Updates a highscore table with a new score.
	///	@details If no high score table exists - i.e. highscoreTable is
	///		an empty string, it will create a fresh table. If the
	///		passed highscoreTable is invalid, it will be dumped and
	///		treated as empty.
	///
	/// @param in  points			
	///	@param out highscoreTable	
	/// @post highscoreTable will be formatted properly to print via
	///		cout.
	/// @return Whether or not the new score changed the highscoreTable
	///////////////////////////////////////////////////////////////////
	bool highScore(const int points, string& highscoreTable);

There are many other ways to start a Doxygen code, start a command, and
way more commands. Look it up if you're interested: 
https://www.stack.nl/~dimitri/doxygen/manual/commands.html

