#ifndef ENTITY_H
#define ENTITY_H

#include "Component.h"


namespace ppc {

class Component;


//TODO: Finish Entity Interface
///////////////////////////////////////////////////////////////////////
/// @brief Uses a collection of Components to define a Entity
/// @details The Entity is a minimally intrusive class that holds 
///     together the real powerhouses: the Components. The only data
///     in Entity should be data accepted to be used by a vast majority
///     of Components.
///////////////////////////////////////////////////////////////////////
class Entity {
public:

  /////////////////////////////////////////////////////////////////////
  // Constructors & Destructor
  /////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////
    /// @brief Default Constructor
    /// @details Creates an Empty Entity
    ///////////////////////////////////////////////////////////////////
    Entity();

    //No Copy Constructor
    Entity(const Entity& other) = delete;

    ///////////////////////////////////////////////////////////////////
    /// @brief Destructor
    ///////////////////////////////////////////////////////////////////
    ~Entity();


  /////////////////////////////////////////////////////////////////////
  // Component Manipulation
  /////////////////////////////////////////////////////////////////////

    //TODO: Add functionality to remove a Component

    ///////////////////////////////////////////////////////////////////
    /// @brief Adds a Component to the Entity
    /// @param cmpnt Pointer to the Component you wish to add.
    ///////////////////////////////////////////////////////////////////
    void addComponent(Component* cmpnt);
    
    
  /////////////////////////////////////////////////////////////////////
  // Message System
  /////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////
    /// @brief Broadcasts a message to each Component in the Entity
    /// @todo Create a union or enum specifically for this messaging
    ///     system.
    ///
    /// @param message Denotes the message to send.
    ///////////////////////////////////////////////////////////////////
    void broadcastMessage(unsigned int message);


private:

    //Holds the max amount of Components per Entity
    static const size_t maxComponentCount = 10;
    
    //Stores a collection of pointers to Components
    Component* components[maxComponentCount];


};


};      //End namespace ppc


#endif  //ENTITY_H
