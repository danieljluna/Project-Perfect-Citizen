#ifndef COMPONENT_H
#define COMPONENT_H


typedef unsigned int msgType;

namespace ppc {


class Entity;

///////////////////////////////////////////////////////////////////////
/// @brief Parent Class of all Component types.
/// @author Daniel Luna
/// @details Components are a base class used most commonly in pairing
///     with the Entity class. Components can be assigned an Entity, 
///     and doing so will allow the Component to send / recieve
///     messages to / from the other Components which comprise the 
///     Entity.
///////////////////////////////////////////////////////////////////////
class Component {

//Entity needs to be able to set a Component's entity field
friend Entity;

public:

  /////////////////////////////////////////////////////////////////////
  // Destructor
  /////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////
    /// @brief Virtual Destructor
    ///////////////////////////////////////////////////////////////////
    virtual ~Component();


  /////////////////////////////////////////////////////////////////////
  // Getters
  /////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////
    /// @brief Returns the Entity this object is a part of
    ///////////////////////////////////////////////////////////////////
    Entity* getEntity();

    
  /////////////////////////////////////////////////////////////////////
  // Message System
  /////////////////////////////////////////////////////////////////////

    //TODO: Flesh out Component messaging with a passed union / enum

    ///////////////////////////////////////////////////////////////////
    /// @brief Recieves a message broadcast from the Entity.
    /// @details If a Component requires a message from another 
    ///     Component, this function should be overlaoded to react
    ///     appropriately to the message.
    /// @todo Create a union or enum specifically for this messaging
    ///     system.
    /// 
    /// @param message This parameter denotes what message is being
    ///     passed to this Component.
    ///////////////////////////////////////////////////////////////////
    virtual void recieveMessage(msgType message) {};


protected:

  /////////////////////////////////////////////////////////////////////
  // Protected Constructors to prevent instantiation
  /////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////  
    /// @brief Default Constructor
    /// @details Initializes the Component with no Entity.
    ///////////////////////////////////////////////////////////////////
	Component();

    ///////////////////////////////////////////////////////////////////
    /// @brief Copy Constructor
    /// @details Copies the Component, ignoring any entity attatched
    ///     to it.
    ///////////////////////////////////////////////////////////////////
    Component(const Component& other);

    ///////////////////////////////////////////////////////////////////
    /// @brief Move Constructor
    /// @details Also makes sure the Entity is aware of the move.
    ///////////////////////////////////////////////////////////////////
    Component(Component&& other);


  /////////////////////////////////////////////////////////////////////
  // Protected Data
  /////////////////////////////////////////////////////////////////////

    //Points to the Entity this Component is a part of
    Entity* entity;


};


};      //End namespace ppc

#endif  //End COMPONENT_H
