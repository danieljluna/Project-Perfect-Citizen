#ifndef WINDOW_H
#define WINDOW_H

#include <vector>

#include <SFML/Graphics/RectangleShape.hpp>
#include <SFML/Graphics/RenderTexture.hpp>
#include <SFML/System/Time.hpp>
#include <SFML/Graphics/Drawable.hpp>

#include "inputComponent.h"
#include "updateComponent.h"
#include "renderComponent.h"
#include "windowInterface.h"


namespace ppc {


///////////////////////////////////////////////////////////////////////
/// @brief Manages a sub-screen with its own Components
///////////////////////////////////////////////////////////////////////
class Window : public WindowInterface, public sf::Drawable {
public:

  /////////////////////////////////////////////////////////////////////
  // Constructors and Destructor
  /////////////////////////////////////////////////////////////////////

    //No Default Constructor
    Window() = delete;

    ///////////////////////////////////////////////////////////////////
    /// @brief Window Constructor
    /// @details Creates a Window of the given width and height.
    ///
    /// @param width The desired width of the Window
    /// @param height The desired height of the Window
    ///////////////////////////////////////////////////////////////////
    Window(unsigned int width, unsigned int height);

    ///////////////////////////////////////////////////////////////////
    /// @brief Window Constructor
    /// @details Creates a Window of the given size.
    ///
    /// @param size The desired size of the Window
    ///////////////////////////////////////////////////////////////////
    Window(const sf::Vector2u& size);

    ///////////////////////////////////////////////////////////////////
    /// @brief Copy Constructor
    ///////////////////////////////////////////////////////////////////
    Window(const Window& other);

    ///////////////////////////////////////////////////////////////////
    /// @brief Virtual Destructor
    ///////////////////////////////////////////////////////////////////
    virtual ~Window();


  /////////////////////////////////////////////////////////////////////
  // Step Functionality
  /////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////
    /// @brief Updates this, and all objects in the Window.
    ///////////////////////////////////////////////////////////////////
    void update(sf::Time& deltaTime);

    ///////////////////////////////////////////////////////////////////
    /// @brief Reacts to Input for this, and all objects in the Window.
    ///////////////////////////////////////////////////////////////////
    void registerInput();


protected:

    ///////////////////////////////////////////////////////////////////
    /// @brief Draws this, and all objects in the Window.
    /// @details 
    ///
    /// @param target This is almost always going to be a 
    /// sf::renderWindow. 
    /// @param states This is used to dictate certain states that the 
    /// object can be rendered in. For now this can be safely "ignored"
    /// Just created a RenderStates object and shove it in there. 
    ///////////////////////////////////////////////////////////////////
    void draw(sf::RenderTarget& target, 
              sf::RenderStates states) const final;


  /////////////////////////////////////////////////////////////////////
  // Protected Members
  /////////////////////////////////////////////////////////////////////

    sf::RenderTexture windowSpace_;

    sf::View windowView_;
    
    std::vector<InputComponent> inputcmpnts_;

    std::vector<UpdateComponent> updatecmpnts_;

    std::vector<RenderComponent> rendercmpnts_;


};


};      //End namespace ppc


#endif  //End WINDOW_H
