#pragma once

#include <map>
#include <SFML/System/Time.hpp>
#include <SFML/System/Clock.hpp>

#include "LoggerParcel.h"

namespace ppc {


///////////////////////////////////////////////////////////////////////
/// @brief A static class that collects a bunch of testing log data.
///////////////////////////////////////////////////////////////////////
class Logger {
public:

  /////////////////////////////////////////////////////////////////////
  // Storing Times
  /////////////////////////////////////////////////////////////////////

    static void startTimer(std::string label);

    static void restartTimer(std::string label);

    static bool endTimer(std::string label, bool aggregate = true);

    static void eraseLabel(std::string label);

  /////////////////////////////////////////////////////////////////////
  /////////////////////////////////////////////////////////////////////


private:

  /////////////////////////////////////////////////////////////////////
  // Private Deleted Constructors
  /////////////////////////////////////////////////////////////////////

    Logger() = delete;
    Logger(const Logger&) = delete;
    Logger(Logger&&) = delete;


  /////////////////////////////////////////////////////////////////////
  // Private Static Data
  /////////////////////////////////////////////////////////////////////

    static std::map<std::string, LoggerParcel> parcelMap;

    static std::map<std::string, sf::Time> timerStarts;

    static sf::Clock clock;

};


};
