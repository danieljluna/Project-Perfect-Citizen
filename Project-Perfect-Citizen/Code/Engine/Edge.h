#ifndef EDGE_H
#define EDGE_H

#include <memory>
#include <string>
#include <SFML/Graphics.hpp>

namespace ppc {

const sf::Color selRed = { 255, 158, 158 };
const sf::Color selBlack = { 171, 171, 171 };
const sf::Color selGreen = { 138, 255, 173 };

class Edge {

private:

	int weight_;

	std::string relationship_;

	sf::Color color_;

	sf::FloatRect bounds_;
	float minWidth_ = 30.f;
	float minHeight_ = 30.f;

	std::vector<std::vector<std::string>> smsData_;

public:

	///////////////////////////////////////////////////////////////////////
	///@brief Default Ctor
	///////////////////////////////////////////////////////////////////////
	Edge();

	///////////////////////////////////////////////////////////////////////
	///@brief Gives the Edge a weight
	///////////////////////////////////////////////////////////////////////
	void setWeight(int);

	///////////////////////////////////////////////////////////////////////
	///@brief Returns and Edge's weight
	///////////////////////////////////////////////////////////////////////
	int getWeight() const;

	///////////////////////////////////////////////////////////////////////
	///@brief Sets the relationship of the Edge
	///////////////////////////////////////////////////////////////////////
	void setRelation(std::string);

	///////////////////////////////////////////////////////////////////////
	///@brief Gets the Edge's relationship
	///////////////////////////////////////////////////////////////////////
	std::string getRelation() const;

	///////////////////////////////////////////////////////////////////////
	///@brief Sets the Edge color to Red
	///////////////////////////////////////////////////////////////////////
	void setColorRed();

	///////////////////////////////////////////////////////////////////////
	///@brief Sets the Edge color to Brightened Red
	///////////////////////////////////////////////////////////////////////
	void setColorSelectedRed();

	///////////////////////////////////////////////////////////////////////
	///@brief Sets the Edge color to Green
	///////////////////////////////////////////////////////////////////////
	void setColorGreen();

	///////////////////////////////////////////////////////////////////////
	///@brief Sets the Edge color to Brightened Green
	///////////////////////////////////////////////////////////////////////
	void setColorSelectedGreen();

	///////////////////////////////////////////////////////////////////////
	///@brief Sets the Edge color to Black
	///////////////////////////////////////////////////////////////////////
	void setColorBlack();

	///////////////////////////////////////////////////////////////////////
	///@brief Sets the Edge color to Grey
	///////////////////////////////////////////////////////////////////////
	void setColorSelectedBlack();
	///////////////////////////////////////////////////////////////////////
	///@brief Gets the Edge color
	///////////////////////////////////////////////////////////////////////
	sf::Color getColor() const;

	///////////////////////////////////////////////////////////////////////
	///@brief Sets the Edge bounds
	///////////////////////////////////////////////////////////////////////
	void setBounds(sf::FloatRect);

	///////////////////////////////////////////////////////////////////////
	///@brief Gets the Edge bounds
	///////////////////////////////////////////////////////////////////////
	sf::FloatRect getBounds();

	///////////////////////////////////////////////////////////////////////
	///@brief Creates the bounds of the edge, given the start & end 
	/// position of the edge.
	///////////////////////////////////////////////////////////////////////
	void constructBounds(sf::Vector2f,sf::Vector2f);

	void pushSmsData(const std::vector<std::string>& data);

	std::vector<std::vector<std::string>> getSmsData();

};


};  //End namespace mdg


#endif  //End EDGE_H
