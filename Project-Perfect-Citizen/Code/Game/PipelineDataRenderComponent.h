#pragma once

#include <iostream>
#include <string>
#include <stack>

#include <SFML/Graphics.hpp>

#include "../Engine/renderComponent.h"


namespace ppc {

///////////////////////////////////////////////////////////////////////
/// @brief Renders the pipeline meta data information
/// @author Alex Vincent
/// @details Contains an sfml font, text, sprite, and border box that
/// constitutes the metadata box in the pipeline extraction
///////////////////////////////////////////////////////////////////////
class PipelineDataRenderComponent : public ppc::RenderComponent {
private:

	////////////////////////////////////////////////////////////////////
	/// @brief Sprite to be rendered
	////////////////////////////////////////////////////////////////////
	sf::Sprite* sprite_;

	////////////////////////////////////////////////////////////////////
	/// @brief SFML text to draw
	////////////////////////////////////////////////////////////////////
	sf::Text* text_;

	////////////////////////////////////////////////////////////////////
	/// @brief Font the output will take on
	////////////////////////////////////////////////////////////////////
	sf::Font font_;

	////////////////////////////////////////////////////////////////////
	/// @brief The background of the Pipeline data box
	////////////////////////////////////////////////////////////////////
	sf::RectangleShape dataBoxBackground_;

public:


	////////////////////////////////////////////////////////////////////
	/// @brief The background of the Pipeline data box
	/// @param The font to render the text with
	/// @param the x position where the font will be rendered
	/// @param the y position where the font will be rendered
	/// @param the size of the text to display
	/// @param the width of the surrounding border box
	/// @param the height of the surrounding border box
	////////////////////////////////////////////////////////////////////
	PipelineDataRenderComponent(sf::Font& f, int x, int y, int size, int backgroundWidth, int backgroundHeight);

	////////////////////////////////////////////////////////////////////
	/// @brief Destructor
	////////////////////////////////////////////////////////////////////
	~PipelineDataRenderComponent();

	////////////////////////////////////////////////////////////////////
	/// @brief updateString recieves a string from an input component to
	///        display.
	/// @param string to be rendered to the screen
	////////////////////////////////////////////////////////////////////
	void appendString(const std::string& output);

	////////////////////////////////////////////////////////////////////
	/// @brief clearString deletes the contents of a string
	////////////////////////////////////////////////////////////////////
	void clearString();


	////////////////////////////////////////////////////////////////////
	/// @brief Inherited draw functions from the render component
	////////////////////////////////////////////////////////////////////
	virtual void draw(sf::RenderTarget & target,
		sf::RenderStates states) const;

	////////////////////////////////////////////////////////////////////
	/// @brief Inherited recieveMessage function from render component
	////////////////////////////////////////////////////////////////////
	virtual void recieveMessage(msgType code) override;

};

};