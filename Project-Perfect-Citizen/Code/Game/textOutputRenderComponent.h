#pragma once

#include <iostream>
#include <SFML/Graphics.hpp>
#include "../Engine/renderComponent.h"
#include "../Engine/NodeState.h"
#include <string>

using namespace std;

///////////////////////////////////////////////////////////////////////
/// @brief Designated Render Component for an Text Output Box
/// @author Michael Lowe / Alex Vincent
/// @details write this later
///////////////////////////////////////////////////////////////////////
class textOutputRenderComponent : public ppc::RenderComponent {
private:

	////////////////////////////////////////////////////////////////////
	/// @brief Sprite to be rendered
	////////////////////////////////////////////////////////////////////
	sf::Sprite* sprite_;

	////////////////////////////////////////////////////////////////////
	/// @brief SFML text to draw
	////////////////////////////////////////////////////////////////////
	sf::Text* text_;

	////////////////////////////////////////////////////////////////////
	/// @brief Font the output will take on
	////////////////////////////////////////////////////////////////////
	sf::Font font_;

	////////////////////////////////////////////////////////////////////
	/// @brief The fileTree to read output from
	////////////////////////////////////////////////////////////////////
	ppc::NodeState& fileTree_;

	////////////////////////////////////////////////////////////////////
	/// @brief The pool of output to be displayed via a string
	////////////////////////////////////////////////////////////////////
	string str_;
	static const int size = 128;

public:

	textOutputRenderComponent(sf::Font& f, ppc::NodeState& fileTree, 
		int x, int y, int size);

	~textOutputRenderComponent();

	////////////////////////////////////////////////////////////////////
	/// @brief updateString recieves a string from an input component to
	///        display.
	/// @param s is the string recieved from the input component
	////////////////////////////////////////////////////////////////////
	void updateString(std::vector<string> cmd);

	////////////////////////////////////////////////////////////////////
	/// @brief clearString deletes the contents of a string
	/// @param s is the string recieved from the input component
	////////////////////////////////////////////////////////////////////
	void clearString();

	virtual void draw(sf::RenderTarget & target, 
		sf::RenderStates states) const;

	//virtual void registerInput(sf::Event& ev) override;
	virtual void recieveMessage(msgType code) override;

};
