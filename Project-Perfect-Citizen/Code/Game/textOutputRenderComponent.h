#pragma once

#include "../Engine/renderComponent.h"
#include <SFML/Graphics/Font.hpp>
#include "../Engine/NodeState.h"
#include "../Game/textInputRenderComponent.hpp"
#include <vector>

namespace sf {
    class Sprite;
    class Text;
    class Image;
};



namespace ppc {

	class Desktop;

///////////////////////////////////////////////////////////////////////
/// @brief Designated Render Component for an Text Output Box
/// @author Michael Lowe / Alex Vincent
/// @details write this later
///////////////////////////////////////////////////////////////////////
class textOutputRenderComponent : public ppc::RenderComponent {
private:

	////////////////////////////////////////////////////////////////////
	/// @brief SFML text to draw
	////////////////////////////////////////////////////////////////////
	sf::Text* text_;

	////////////////////////////////////////////////////////////////////
	/// @brief Font the output will take on
	////////////////////////////////////////////////////////////////////
	sf::Font font_;

	////////////////////////////////////////////////////////////////////
	/// @brief The fileTree to read output from
	////////////////////////////////////////////////////////////////////
	ppc::NodeState fileTree_;

    ppc::Desktop* theDesktop_;
    
    sf::Image buttonSheet_;

	textInputRenderComponent* promptLine;
    
	////////////////////////////////////////////////////////////////////
	/// @brief The pool of output to be displayed via a string
	////////////////////////////////////////////////////////////////////
	std::string str_;
	static const int size = 128;

	////////////////////////////////////////////////////////////////////
	/// @brief Keeps track of how many lines are currently printed
	////////////////////////////////////////////////////////////////////
	int numDisplayedLines;

	////////////////////////////////////////////////////////////////////
	/// @brief The maximum amount of lines that can be displayed
	////////////////////////////////////////////////////////////////////
	static const int maxDisplayedLines = 21;

public:

    textOutputRenderComponent(ppc::Desktop& dt, sf::Image bs, sf::Font f, ppc::NodeState fileTree,
		textInputRenderComponent* tirc, int x, int y, int size);

	~textOutputRenderComponent();
    
    sf::Vector2f getPosition() const;

	sf::Text* getText();

	////////////////////////////////////////////////////////////////////
	/// @brief updateString recieves a string from an input component to
	///        display.
	/// @param s is the string recieved from the input component
	////////////////////////////////////////////////////////////////////
	void updateString(std::vector<std::string> cmd);

	////////////////////////////////////////////////////////////////////
	/// @brief Updates the textbox with the current working directory
	////////////////////////////////////////////////////////////////////
	void updatePrompt();

	////////////////////////////////////////////////////////////////////
	/// @brief Returns the current number of lines in the console
	////////////////////////////////////////////////////////////////////
	int getNumLines();

	////////////////////////////////////////////////////////////////////
	/// @brief clearString deletes the contents of a string
	/// @param s is the string recieved from the input component
	////////////////////////////////////////////////////////////////////
	void clearString();

	virtual void draw(sf::RenderTarget & target, 
		sf::RenderStates states) const;

	//virtual void registerInput(sf::Event ev) override;
	virtual void recieveMessage(msgType code) override;

};


};
