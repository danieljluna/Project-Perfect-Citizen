//
//  expressionistParser.hpp
//  Project-Perfect-Citizen
//
//  Created by Brandon Gomez on 2/15/16.
//  Coauthored by Mark Biundo
//  Copyright Â© 2016 Hyperfocus Games. All rights reserved.
//

#ifndef expressionistParser_hpp
#define expressionistParser_hpp

#include <stdio.h>
#include <string>
#include <vector>
#include <map>

#include "../Library/json/json.h"

//#include "PipelineCharacter.h"
namespace ppc {
	class PipelineCharacter;
	class Edge;
};

namespace expr {


class ExpressionistParser {
public:
	///////////////////////////////////////////////////////////////////////
	/// @brief Builds Json::Value Object containing Expressionist Grammar
	/// @details Builds a C++ Json representation of an Expressionist
	///  grammar object as specified by a .json file
	/// @param[out] Json::Value         Json object containing 
	///                                 an expressionist grammar
	/// @param[in]  string              Json file name containing an
	///                                 expressionist grammar
	///////////////////////////////////////////////////////////////////////
	static Json::Value parseExpressionistAsJson(std::string file);


	///////////////////////////////////////////////////////////////////////
	/// @brief Builds a statement from an Expressionist Grammar
	/// @details Navigates an Expressionist Grammar Object through
	///  depth first traversal, assembling a string as it goes
	///  that represents that path it takes.  Checks requirements
	///  specified by markup at each stage and rules out branches that
	///  do not meet the requirements in the markup.
	/// @param[out] string              A string procedurally generated by 
	///                                 an expressionist grammar
	/// @param[in]  const Json::Value&  A Json based object containing an
	///                                 expressionist grammar
	///////////////////////////////////////////////////////////////////////
	static std::string expressWithJson(const Json::Value& exprOutput, const ppc::PipelineCharacter& speaker, const ppc::Edge& link);
private:
	static std::pair<std::string, bool> expandWithJson(const Json::Value& exprOutput, const Json::Value& symbol, const ppc::PipelineCharacter& speaker, const ppc::Edge& link);

	static std::pair<std::string, bool> fireWithJson(const Json::Value& exprOutput, const Json::Value& rule, const ppc::PipelineCharacter& speaker, const ppc::Edge& link);

	static bool checkMarkUpPreconditions(const Json::Value & markup, const ppc::PipelineCharacter & speaker, const ppc::Edge& link);

	static std::map<std::string, std::string> systemVars_;

	static std::string generateDayOfWeek();
};

};

#endif /* expressionistParser_hpp */
