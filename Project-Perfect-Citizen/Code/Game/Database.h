#pragma once

#include <string.h>
#include <iostream>
#include <vector>
#include "PipelineCharacter.h"
///////////////////////////////////////////////////////////////////////
/// @brief Datastructure of Pipeline characters that will feed the
/// database application in-game
/// @author Alex Vincent
/// @details Database is a wrapper that contains a vector of a filtered
/// state of the database
/// @note The purpose of a database object is to contain a snapshot
/// of a given database search. To represent multiple searches,
/// the intention is that there will be a stack of databases
/// in the application itself.
///////////////////////////////////////////////////////////////////////
namespace ppc {

class Database {

private:
	std::vector<ppc::PipelineCharacter> databaseState_;
	int dataBaseMax_;

public:


	///////////////////////////////////////////////////////////////////////
	/// @brief Default constructor
	///////////////////////////////////////////////////////////////////////
	Database();

	///////////////////////////////////////////////////////////////////////
	/// @brief Creates a fresh database of the max limit and sets it to
	/// the current state of the database
	/// @param the max limit of the new database
	///////////////////////////////////////////////////////////////////////
	void generateFullDatabase(int newMaxNumber);


	///////////////////////////////////////////////////////////////////////
	/// @brief Returns a vector of pipeline characters
	///////////////////////////////////////////////////////////////////////
	std::vector<ppc::PipelineCharacter> getDatabaseState();

	///////////////////////////////////////////////////////////////////////
	/// @brief Default Destructor
	///////////////////////////////////////////////////////////////////////
	~Database();

	///////////////////////////////////////////////////////////////////////
	/// @brief Returns a vector of strings of the current database
	///////////////////////////////////////////////////////////////////////
	std::vector<std::string> getPrintableDatabase();

	///////////////////////////////////////////////////////////////////////
	/// @brief Returns the size of the current database's snapshot
	///////////////////////////////////////////////////////////////////////
	size_t getDatabaseSize();


	///////////////////////////////////////////////////////////////////////
	/// @brief Returns T/F value of whether the database snapshot is 0
	///////////////////////////////////////////////////////////////////////
	bool isEmpty();

	///////////////////////////////////////////////////////////////////////
	/// @brief Sets the current database's vector of characters
	/// @param The new database state to be assigned to the database
	/// wrapper class. This is usually a filtered list of PE characters.
	///////////////////////////////////////////////////////////////////////
	void setNewSnapshot(std::vector<ppc::PipelineCharacter> snapShot);

	///////////////////////////////////////////////////////////////////////
	/// @brief Specifies whether the filter query is searchable
	/// @param the filter to be determined whether is value
	///////////////////////////////////////////////////////////////////////
	bool filterIsValid(std::string filter);

	///////////////////////////////////////////////////////////////////////
	/// @brief Returns a copy of a new filtered database delimited by
	/// the filter. Assumes a valid filter query.
	/// @param the database parameter to search on
	/// @param the user-selected item to search on the filter
	///////////////////////////////////////////////////////////////////////
	Database& sortBy(std::string filter, std::string query);

	///////////////////////////////////////////////////////////////////////
	/// @brief prints the jobs of the characters currently in the database
	///////////////////////////////////////////////////////////////////////
	void printCharacters();

};

};