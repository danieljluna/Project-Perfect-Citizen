#ifndef HELIOS_SPROBJ_H
#define HELIOS_SPROBJ_H

#include "helios_baseobj.h"

#include <vector>

#include <SFML\Graphics\Rect.hpp>
#include <SFML\Graphics\Sprite.hpp>

class Texture;

namespace helios {


///////////////////////////////////////////////////////////////////////
/// @brief An abstract parent class providing the basis for packaging 
///     sprite with the appropriate logic functions all objects in the
///     room need.
///////////////////////////////////////////////////////////////////////
class SprObj : public BaseObj { //TODO: Finish SprObj
public:

  /////////////////////////////////////////////////////////////////////
  //  Constructors and Destructor:
  /////////////////////////////////////////////////////////////////////

    //Delete Copy Constructor
    SprObj(const SprObj& other) = delete;

    //Delete Move Constructor
    SprObj(SprObj&& other) = delete;

    //Virtual Destructor
    virtual ~SprObj();


  /////////////////////////////////////////////////////////////////////
  //  Operators:
  /////////////////////////////////////////////////////////////////////

    //No Universal Copy Assignment Operator
    BaseObj& operator=(const BaseObj& other) = delete;

    //No Universal Move Assignment Operator
    BaseObj& operator=(BaseObj&& other) = delete;

    
  /////////////////////////////////////////////////////////////////////
  //  Mutator Functions:
  /////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////
    /// @brief Sets the visibility of the object.
    /// 
    /// @param vis Desired visibility
    ///
    /// @see is_visible()
    ///////////////////////////////////////////////////////////////////
    void set_visible(const bool vis);
    

  /////////////////////////////////////////////////////////////////////
  //  Step and Frame Functions:
  /////////////////////////////////////////////////////////////////////

    virtual void Update() = 0;


protected:

  /////////////////////////////////////////////////////////////////////
  //  Proctected Methods
  /////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////
    /// @brief Default Constructor. 
    /// @details Creates an object that is inactive and invisible, with
    ///     the given priority (default zero).
    ///
    /// @param priority Priority of object
    ///////////////////////////////////////////////////////////////////
    explicit SprObj(const signed int priority = 0);
    
    ///////////////////////////////////////////////////////////////////
    /// @brief Constructs the SprObj from a vector of Sprites
    /// 
    /// @param sprVec Sprite Vector
    /// @param priority Priority of object
    ///////////////////////////////////////////////////////////////////
    explicit SprObj(const std::vector<sf::Sprite> &sprVec,
                    const signed int priority = 0);
    
    ///////////////////////////////////////////////////////////////////
    /// @brief Sets current sprite index
    /// @details If the index passed is invalid, nothing will happen.
    ///
    /// @param index Desired index
    ///
    /// @pre index: [0, _spriteVector.size())
    ///////////////////////////////////////////////////////////////////
    void set_sprite_index(const std::size_t index);

    ///////////////////////////////////////////////////////////////////
    /// @brief Returns current sprite index
    ///
    /// @see set_sprite_index(const size_t)
    ///////////////////////////////////////////////////////////////////
    size_t get_sprite_index();
    
    virtual void render(sf::RenderTarget &target, 
                        sf::RenderStates states) const;


  /////////////////////////////////////////////////////////////////////
  //  Protected Data
  /////////////////////////////////////////////////////////////////////

    //Holds the sprite to be drawn
    std::vector<sf::Sprite> _spriteVector;

    
private:

  /////////////////////////////////////////////////////////////////////
  //  Private Data
  /////////////////////////////////////////////////////////////////////

    //Holds the current index
    std::size_t _spriteIndex;


};  //End SprObj Declaration-------------------------------------------



}; //End Namespace-----------------------------------------------------

#endif  //HELIOS_SPROBJ_H
