#ifndef HELIOS_SPROBJ_H
#define HELIOS_SPROBJ_H

#include <SFML/Graphics/Sprite.hpp>
#include <SFML/System/Vector2.hpp>

#include "helios_baseobj.h"

namespace Helios {


///////////////////////////////////////////////////////////////////////
/// @brief An abstract parent class providing the basis for packaging 
///     sprite with the appropriate logic functions all objects in the
///     room need.
///
///////////////////////////////////////////////////////////////////////
class SprObj : BaseObj { //TODO: Finish SprObj
public:

  /////////////////////////////////////////////////////////////////////
  //  Constructors and Destructor:
  /////////////////////////////////////////////////////////////////////

    //Delete Copy Constructor
    SprObj(const SprObj& other) = delete;

    //Delete Move Constructor
    SprObj(SprObj&& other) = delete;

    //Virtual Destructor
    virtual ~SprObj();


  /////////////////////////////////////////////////////////////////////
  //  Operators:
  /////////////////////////////////////////////////////////////////////

    //No Universal Copy Assignment Operator
    BaseObj& operator=(const BaseObj& other) = delete;

    //No Universal Move Assignment Operator
    BaseObj& operator=(BaseObj&& other) = delete;

    
  /////////////////////////////////////////////////////////////////////
  //  Step and Frame Functions:
  /////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////
    /// @brief Function called by the Room this object is active in to
    /// update this object for the next frame.
    ///
    ///////////////////////////////////////////////////////////////////
    virtual void Update() = 0;


protected:

  /////////////////////////////////////////////////////////////////////
  //  Proctected Methods
  /////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////
    /// @brief Default Constructor
    ///////////////////////////////////////////////////////////////////
    SprObj(const unsigned int priority = 0);
    
    ///////////////////////////////////////////////////////////////////
    /// @brief Draws the Sprite
    ///////////////////////////////////////////////////////////////////
    virtual void render(sf::RenderTarget &target, sf::RenderStates states) const;


  /////////////////////////////////////////////////////////////////////
  //  Protected Data
  /////////////////////////////////////////////////////////////////////

    //Holds the sprite to be drawn
    sf::Sprite _sprite;


};  //End SprObj Declaration-------------------------------------------




}; //End Namespace-----------------------------------------------------

#endif  //HELIOS_SPROBJ_H
