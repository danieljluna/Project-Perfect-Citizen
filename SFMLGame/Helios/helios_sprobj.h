#ifndef HELIOS_SPROBJ_H
#define HELIOS_SPROBJ_H

#include "helios_baseobj.h"

#include <vector>

#include <SFML\Graphics\Rect.hpp>
#include <SFML\Graphics\Sprite.hpp>

class Texture;

namespace helios {

typedef std::vector<sf::Sprite> Animation;

///////////////////////////////////////////////////////////////////////
/// @brief An abstract parent class providing the basis for packaging 
///     sprite with the appropriate logic functions all objects in the
///     room need.
///////////////////////////////////////////////////////////////////////
class SprObj : public BaseObj { //TODO: Finish SprObj
public:

  /////////////////////////////////////////////////////////////////////
  // Constructors and Destructor:
  /////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////
    /// @brief Deleted Copy Constructor
    ///////////////////////////////////////////////////////////////////
    SprObj(const SprObj& other) = delete;

    ///////////////////////////////////////////////////////////////////
    /// @brief Deleted Move Constructor
    ///////////////////////////////////////////////////////////////////
    SprObj(SprObj&& other) = delete;

    ///////////////////////////////////////////////////////////////////
    /// @brief Virtual Destructor
    ///////////////////////////////////////////////////////////////////
    virtual ~SprObj();


  /////////////////////////////////////////////////////////////////////
  // Operators:
  /////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////
    /// @brief Deleted Copy Assignment Operator
    ///////////////////////////////////////////////////////////////////
    BaseObj& operator=(const BaseObj& other) = delete;

    ///////////////////////////////////////////////////////////////////
    /// @brief Deleted Move Assignment Operator
    ///////////////////////////////////////////////////////////////////
    BaseObj& operator=(BaseObj&& other) = delete;

    
  /////////////////////////////////////////////////////////////////////
  // Accessor Functions:
  /////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////
    /// @brief Returns current animation index
    ///
    /// @see set_animation(const size_t)
    ///////////////////////////////////////////////////////////////////
    size_t get_animation();
    
    ///////////////////////////////////////////////////////////////////
    /// @brief Returns current animation frame
    ///
    /// @see set_animationFrame(const size_t)
    ///////////////////////////////////////////////////////////////////
    size_t get_animationFrame();

    
  /////////////////////////////////////////////////////////////////////
  // Mutator Functions:
  /////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////
    /// @brief Sets the visibility of the object.
    /// 
    /// @param vis Desired visibility
    ///
    /// @see is_visible()
    ///////////////////////////////////////////////////////////////////
    void set_visible(const bool vis);

    ///////////////////////////////////////////////////////////////////
    /// @brief Sets current animation index
    /// @details If the index passed is invalid, nothing will happen.
    ///
    /// @param index Desired animation
    ///
    /// @pre index: [0, _animations.size())
    ///
    /// @see get_animation()
    ///////////////////////////////////////////////////////////////////
    void set_animation(const std::size_t index);

    ///////////////////////////////////////////////////////////////////
    /// @brief Sets current animation frame by index
    /// @details If the index passed is invalid, nothing will happen.
    ///
    /// @param index Desired animation frame
    ///
    /// @pre index: [0, _animations[get_anim()].size())
    ///
    /// @see get_animationFrame()
    ///////////////////////////////////////////////////////////////////
    void set_animationFrame(const std::size_t index);
    

  /////////////////////////////////////////////////////////////////////
  // Step and Frame Functions:
  /////////////////////////////////////////////////////////////////////

    virtual void Update() = 0;


protected:

  /////////////////////////////////////////////////////////////////////
  // Proctected Methods
  /////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////
    /// @brief Default Constructor. 
    /// @details Creates an object that is inactive and invisible, with
    ///     the given priority (default zero).
    ///
    /// @param priority Priority of object
    ///////////////////////////////////////////////////////////////////
    explicit SprObj(const signed int priority = 0);
    
    ///////////////////////////////////////////////////////////////////
    /// @brief Constructs the SprObj from a vector of Sprites
    /// 
    /// @param sprVec Sprite Vector
    /// @param priority Priority of object
    ///////////////////////////////////////////////////////////////////
    explicit SprObj(const std::vector<helios::Animation> &animVec,
                    const signed int priority = 0);
    
    virtual void render(sf::RenderTarget &target, 
                        sf::RenderStates states) const;


  /////////////////////////////////////////////////////////////////////
  // Protected Data
  /////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////
    /// @brief Holds animation data
    /// @details Each Animation is a vector of Sprites.
    ///////////////////////////////////////////////////////////////////
    std::vector<Animation> _animations;

    
private:

  /////////////////////////////////////////////////////////////////////
  // Private Data
  /////////////////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////////////
    /// @brief Current Animation
    /// @details Holds the index denoting the current animation to work
    ///     with.
    ///////////////////////////////////////////////////////////////////
    std::size_t _animation;

    ///////////////////////////////////////////////////////////////////
    /// @brief Current Animation Frame
    /// @details Holds the index denoting the current sprite to draw 
    ///     from the active animation.
    ///////////////////////////////////////////////////////////////////
    std::size_t _animationFrame;


  /////////////////////////////////////////////////////////////////////
  // Inherited Data with Changed Access:
  /////////////////////////////////////////////////////////////////////

    //Shift _visible to private
    using BaseObj::_visible;


};  //End SprObj Declaration-------------------------------------------



}; //End Namespace-----------------------------------------------------

#endif  //HELIOS_SPROBJ_H
